name: Pre-Shared-Infrastructure Deployment Pipeline

trigger:
  - master

pool:
  vmImage: ubuntu-22.04

variables:
  - name: timeoutInMinutes
    value: 60
  - name: agentPool
    value: ubuntu-latest
  # - name: storageAccount
  #   value: sdsstate${{ lower(parameters.environment) }}
  # - name: container
  #   value: tfstate-${{ lower(parameters.environment) }}
  # - name: serviceConnection
  #   value: DTS-SHAREDSERVICES-${{ upper(parameters.environment) }}
  # - name: keyvaultName
  #   value: pre-stg
  # - name: tfInitSub
  #   value: "04d27a32-7a07-48b3-95b8-3c8691e1a263"
  - name: terraformInitSubscription
    value: 04d27a32-7a07-48b3-95b8-3c8691e1a263
  - name: product
    value: pre
  - name: project
    value: pre
  - name: kvConnectedServiceName
    value: DCD-CFT-Sandbox
  - template: vars/input-variables.yaml@cnp-azuredevops-libraries
  # - group: pre-azure-devops-agent

resources:
  repositories:
    - repository: cnp-azuredevops-libraries
      type: github
      ref: refs/heads/master
      name: hmcts/cnp-azuredevops-libraries
      endpoint: 'hmcts (3)'


parameters:

  - name: overrideAction
    type: string
    default: plan
    values:
      - plan
      - apply
      - destroy

  - name: environment
    displayName: Environment
    type: string
    default: "Dev"
    values:
      - Sbox
      - Dev
      - Demo
      - Test
      - Stg
      - Prod

  - name: location
    displayName: Location
    type: string
    default: "UK South"
    values:
      - "UK South"
      - "UK West"

  - name: terraformInitSubscription
    default: '04d27a32-7a07-48b3-95b8-3c8691e1a263'

  - name: components
    type: object
    default:
    - deployment: 'Network'
      component: '00-network'
      serviceConnection: 'DTS-SHAREDSERVICES-DEV'
      kvServiceConnection: 'DTS-SHAREDSERVICES-SBOX'
      subscription: '04d27a32-7a07-48b3-95b8-3c8691e1a263'
      dependsOn: 'Precheck'
    - deployment: 'HubPeering'
      component: '01-hub-peering'
      serviceConnection: 'OPS-APPROVAL-GATE-MGMT-ENVS'
      kvServiceConnection: 'DTS-SHAREDSERVICES-SBOX' #'HMCTS-CONTROL'
      subscription: '04d27a32-7a07-48b3-95b8-3c8691e1a263'
      dependsOn: '00-network'
    - deployment: 'Core'
      component: '02-core'
      serviceConnection: 'DTS-SHAREDSERVICES-DEV'
      dependsOn: 'Precheck'
    - deployment: 'Postgres'
      component: '03-postgres'
      serviceConnection: 'DTS-SHAREDSERVICES-DEV'
      dependsOn: 'Precheck'
    - deployment: 'Storage'
      component: '04-storage'
      serviceConnection: 'DTS-SHAREDSERVICES-DEV'
      dependsOn: 'Precheck'
    - deployment: 'AMS'
      component: '05-ams'
      serviceConnection: 'DTS-SHAREDSERVICES-DEV'
      dependsOn: 'Precheck'

stages:
  - stage: Precheck
    jobs:
      - job:
        pool:
          vmImage: ${{ variables.agentPool }}
          timeoutInMinutes: ${{ variables.timeoutInMinutes }}
        steps:
          - checkout: self
          - template: steps/terraform-precheck.yaml@cnp-azuredevops-libraries
            parameters:
              keyvaultName: 'infra-vault-nonprod'
              keyvaultSecret: 'azure-devops-token'
              serviceConnection: 'DTS-SHAREDSERVICES-SBOX'
              overrideAction: ${{ parameters.overrideAction }}

  - ${{ each deployment in parameters.components }}:
      - stage: ${{ deployment.deployment }}
        jobs:
          - job: TerraformPlanApply
            pool:
              vmImage: ${{ variables.agentPool }}
            timeoutInMinutes: ${{ variables.timeoutInMinutes }}
            steps:
              - template: steps/set-build-repo-suffix-env-var.yaml@cnp-azuredevops-libraries   

              - template: steps/keyvault-read.yaml@cnp-azuredevops-libraries
                parameters:
                  serviceConnection: ${{ deployment.serviceConnection }}
                  environment: ${{ parameters.environment }}
                  subscriptionIdVariableName: 'SUBSCRIPTION_ID'
                  storageAccountVariableName: 'STORAGE_ACCOUNT'
                  keyVaultVariableName: 'KEY_VAULT'

              - template: steps/terraform.yaml@cnp-azuredevops-libraries
                parameters:
                  overrideAction: ${{ parameters.overrideAction }}
                  environment: ${{ lower(parameters.environment) }}
                  component: ${{ deployment.component }}
                  kvConnectedServiceName: ${{ deployment.kvServiceConnection }} #DTS-SHAREDSERVICES-SBOX
                  serviceConnection: ${{ deployment.serviceConnection }} #'OPS-APPROVAL-GATE-MGMT-ENVS'
                  terraformInitSubscription: ${{ variables.terraformInitSubscription }} #'HMCTS-CONTROL'
                  product: ${{ variables.product }}
                  location: ${{ parameters.location }}
                  tfVarsFile: "$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/environments/${{ lower(parameters.environment) }}/${{ lower(parameters.environment) }}.tfvars"
                  initCommandOptions: >
                    -backend-config storage_account_name=$(STORAGE_ACCOUNT)

              # - template: steps/terraform.yaml@cnp-azuredevops-libraries
              #   parameters:
              #     overrideAction: ${{ parameters.action }}
              #     environment: ${{ parameters.env  }}
              #     component: "01-network"
              #     serviceConnection: "OPS-APPROVAL-GATE-MGMT-ENVS"
              #     terraformInitSubscription: ${{ variables.tfInitSub }}
              #     product: $(product)
              #     location: ${{ parameters.location }}
              #     tfVarsFile: "$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/environments/01-network/${{ parameters.env }}.tfvars"
              #     planCommandOptions: "-var project=$(project) -var control_vault=$(KEY_VAULT) -var subscription_id=$(SUBSCRIPTION_ID)"
              #     initCommandOptions: >
              #       -var subscription_id=$(SUBSCRIPTION_ID)
              #       -backend-config storage_account_name=$(STORAGE_ACCOUNT)

                  #   -backend-config storage_account_name=$(STORAGE_ACCOUNT)
                  # -backend-config=subscription_id=${{ deployment.subscription }}
                  #   -backend-config storage_account_name=$(STORAGE_ACCOUNT)
                  # planCommandOptions: "-var project=$(project) -var control_vault=$(controlKeyVault) -var subscription_id=$(SUBSCRIPTION_ID)"