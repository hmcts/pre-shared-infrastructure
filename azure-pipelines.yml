name: Pre-Shared-Infrastructure Deployment Pipeline

trigger:
  - master

pool:
  vmImage: ubuntu-latest

  resources:
    repositories:
      - repository: cnp-azuredevops-libraries
        type: github
        ref: master
        name: hmcts/cnp-azuredevops-libraries
        endpoint: 'hmcts'

variables:
  - name: timeoutInMinutes
    value: 60
  - name: agentPool
    value: ubuntu-latest
  - name: resourceGroup
    value: jenkins-state-${{ lower(parameters.environment) }}
  - name: storageAccount
    value: sdsstate${{ lower(parameters.environment) }}
  - name: container
    value: tfstate-${{ lower(parameters.environment) }}
  - name: serviceConnection
    value: DTS-SHAREDSERVICES-${{ upper(parameters.environment) }}
  - name: terraformInitSubscription
    value: 04d27a32-7a07-48b3-95b8-3c8691e1a263
  - template: vars/input-variables.yaml@cnp-azuredevops-libraries

parameters:

  - name: overrideAction
    type: string
    default: plan
    values:
      - plan
      - apply
      - destroy

  - name: environment
    displayName: Environment
    type: string
    default: "Dev"
    values:
      - Sbox
      - Dev
      - Demo
      - Test
      - Stg
      - Prod

stages:
  - stage: Precheck
    jobs:
      - job:
        pool:
          vmImage: ${{ variables.agentPool }}
        timeoutInMinutes: ${{ variables.timeoutInMinutes }}
        steps:
          - template: steps/terraform-precheck.yaml@cnp-azuredevops-libraries
            parameters:
              keyvaultName: 'infra-vault-nonprod'
              keyvaultSecret: 'azure-devops-token'
              serviceConnection: ${{ variables.serviceConnection }}
              overrideAction: ${{ parameters.overrideAction }}

      # - stage: Plan and Apply
      #   jobs:
      #     - job: TerraformPlanApply
      #       pool:
      #         vmImage: ${{ variables.agentPool }}
      #       timeoutInMinutes: ${{ variables.timeoutInMinutes }}
      #       steps:
      #         - template: steps/terraform.yaml@cnp-azuredevops-libraries
      #           parameters:
      #             overrideAction: ${{ parameters.overrideAction }}
      #             environment: ${{ lower(parameters.environment) }}
      #             serviceConnection: ${{ variables.serviceConnection }}
      #             terraformInitSubscription: ${{ variables.terraformInitSubscription }}
      #             product: ${{ variables.product }}





# steps:

#   - task: PowerShell@2
#     displayName: Set terraform version env variable
#     inputs:
#       targetType: 'inline'
#       script: |
#         $tfVersion = Get-Content "$(System.DefaultWorkingDirectory)/.terraform-version" -Raw
#         Write-Host "##vso[task.setvariable variable=tfVersion]$tfVersion"

#   - task: TerraformInstaller@0
#     displayName: 'install terraform $(tfVersion)'
#     inputs:
#       terraformVersion: $(tfVersion)

#   - task: TerraformCLI@0
#     displayName: Terraform init
#     inputs:
#       command: init
#       #commandOptions: '-lock=false' # don't lock on PRs / validate phase
#       terraformVersion: $(tfVersion)
#       workingDirectory: $(System.DefaultWorkingDirectory)
#       backendType: 'azurerm'
#       backendServiceArm: $(ServiceConnection)
#       backendAzureRmResourceGroupName: ${{ variables.resourceGroup }}
#       backendAzureRmStorageAccountName: ${{ variables.storageAccount }}
#       backendAzureRmContainerName: ${{ variables.container }}
#       backendAzureRmKey: 'pre/${{ lower(parameters.environment) }}/terraform.tfstate'

#   - task: TerraformCLI@0
#     displayName: Terraform validate
#     inputs:
#       command: 'validate'
#       workingDirectory: $(System.DefaultWorkingDirectory)

#   - task: TerraformCLI@0
#     displayName: Terraform plan
#     inputs:
#       command: plan
#       terraformVersion: $(tfVersion)
#       commandOptions: '-out=tfplan -var-file=${{ lower(parameters.environment) }}.tfvars -lock=false'
#       workingDirectory: $(System.DefaultWorkingDirectory)
#       environmentServiceNameAzureRM: $(ServiceConnection)


  # - task: TerraformCLI@0
  #   displayName: Terraform apply
  #   condition: and(succeeded(), eq('${{ parameters.Action }}', 'apply'))
  #   inputs:
  #     command: apply
  #     terraformVersion: $(tfVersion)
  #     commandOptions: '--auto-approve tfplan'
  #     workingDirectory: $(System.DefaultWorkingDirectory)
  #     environmentServiceNameAzureRM: 'devops-test-service-connection'
