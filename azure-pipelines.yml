name: Pre-Shared-Infrastructure Deployment Pipeline

trigger:
  - master

pool:
  vmImage: ubuntu-latest

resources:
  repositories:
    - repository: azure-devops-templates
      type: github
      name: hmcts/azure-devops-templates
      ref: refs/heads/master
      endpoint: hmcts 

variables:
  - name: resourceGroup
    value: jenkins-state-${{ lower(parameters.environment) }}
  - name: storageAccount
    value: sdsstate${{ lower(parameters.environment) }}
  - name: container
    value: tfstate-${{ lower(parameters.environment) }}

parameters:
  - name: azureServiceConnection
    default: "ado_nonlive_service_principal"

  - name: action
    type: string
    default: plan
    values:
      - plan
      - apply

  - name: environment
    displayName: Environment
    type: string
    default: "Sbox"
    values:
      - Sbox
      - Dev
      - Demo
      - Test
      - Stg
      - Prod
  
steps:

  - task: PowerShell@2
    displayName: Set terraform version env variable
    inputs:
      targetType: 'inline'
      script: |
        $tfVersion = Get-Content "$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/.terraform-version" -Raw
        Write-Host "##vso[task.setvariable variable=tfVersion]$tfVersion"

  - task: TerraformInstaller@0
    displayName: 'install terraform $(tfVersion)'
    inputs:
      terraformVersion: $(tfVersion)

  - task: TerraformCLI@0
    displayName: Terraform init
    inputs:
      command: init
      terraformVersion: $(tfVersion)
      backendType: 'azurerm'
      workingDirectory: $(System.DefaultWorkingDirectory)
      backendServiceArm: ${{ parameters.azureServiceConnection }}
      backendAzureRmResourceGroupName: ${{ variables.resourceGroup }}
      backendAzureRmStorageAccountName: ${{ variables.storageAccount }}
      backendAzureRmContainerName: ${{ variables.container }}
      backendAzureRmKey: 'tf/terraform.tfstate'

  - task: TerraformCLI@0
    displayName: Terraform validate
    inputs:
      command: 'validate'
      workingDirectory: $(System.DefaultWorkingDirectory)

  - task: TerraformCLI@0
    displayName: Terraform plan
    inputs:
      command: plan
      terraformVersion: $(tfVersion)
      commandOptions: '-out=tfplan -var-file=${{ lower(parameters.environment) }}.tfvars'
      workingDirectory: $(System.DefaultWorkingDirectory)
      environmentServiceNameAzureRM: ${{ parameters.azureServiceConnection }}

  # - stage: Precheck
  #   jobs:
  #     - job: Validate
  #       pool:
  #         vmImage: ${{ variables.agentPool }}
  #         timeoutInMinutes: ${{ variables.timeoutInMinutes }}
  #       steps:
  #         - task: TerraformInstaller@0
  #           displayName: Terraform install
  #           inputs:
  #             terraformVersion: ${{ variables.tfversion }}

  # - stage: Precheck
  #   jobs:
  #     - job:
  #       pool:
  #         vmImage: ${{ variables.agentPool }}
  #         timeoutInMinutes: ${{ variables.timeoutInMinutes }}
  #       steps:
  #         - template: steps/terraform-precheck.yaml@cnp-azuredevops-libraries
  #           parameters:
  #             keyvaultName: 'infra-vault-nonprod'
  #             keyvaultSecret: 'azure-devops-token'
  #             serviceConnection: 'DCD-CFT-Sandbox'
  #             overrideAction: ${{ parameters.action }}

  # - task: TerraformCLI@0
  #   displayName: Terraform apply
  #   condition: and(succeeded(), eq('${{ parameters.Action }}', 'apply'))
  #   inputs:
  #     command: apply
  #     terraformVersion: $(tfVersion)
  #     commandOptions: '--auto-approve tfplan'
  #     workingDirectory: $(System.DefaultWorkingDirectory)
  #     environmentServiceNameAzureRM: 'devops-test-service-connection'
