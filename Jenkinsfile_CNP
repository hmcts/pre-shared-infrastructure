#!groovy
//noinspection GroovyUnusedAssignment
@Library("Infrastructure") _

def product = "pre"

def component = "shared-infrastructure"

static String lockRg(String envName){
  def lockScript = "environment='" +  envName + "';" +
        'rgName="pre-sbox";' +
        'lockName="${environment}-lock";' +
        '' +
        'az login --identity;' +
        'az account set -s "DTS-SHAREDSERVICES-${environment}";' +
        '' +
        'az group lock create --lock-type CanNotDelete --name ${lockname}   --resource-group ${rgName}'
        
    return lockScript;
}

static String addamsid(String envName){
  def amsstorageid = "environment='" +  envName + "';" +
        'rgName="pip-ss-${environment}-rg";' +
        'lockName="${environment}-lock";' +
        '' +
        'az login --identity;' +
        'az account set -s "DTS-SHAREDSERVICES-${environment}";' +
        '' +
        'az ams account identity assign -n preams${env}} -g pre-${env} --user-assigned "/subscriptions/DTS-SHAREDSERVICES-${env}/resourcegroups/managed-identities-${env}-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/pre-${env}-mi";' +
        'az ams account storage set-authentication --storage-auth ManagedIdentity --user-assigned "/subscriptions/DTS-SHAREDSERVICES-$env/resourcegroups/managed-identities-$env-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/pre-$env-mi" --account-name preams$env --resource-group pre-$env;' 
        
    return amsstorageid;
}

static String unlockRg(String envName){
  def unlockScript= 
        "environment='" +  envName + "';" +
        'rgName="pre-${environment}";' +
        'lockName="${environment}-lock";' +
        '' +
        'az login --identity;' +
        'az account set -s "DTS-SHAREDSERVICES-${environment}";' +
        '' +
        'echo "Get ${lockName} lock from ${rgName}";' +
        'lock=$(az lock list --resource-group ${rgName} --query "[? contains(name, \'${lockName}\')].{name:name}" -o tsv);' +
        '' +
        '$($lock != "" && echo "Delete Lock ${lockName} on ${rgName}"; az lock delete --name ${lockName} --resource-group ${rgName} || echo "${lockName} on ${rgName} not found")'

    return unlockScript;
}
def branchesToSync = ['demo']

withInfraPipeline(product) {
  enableSlackNotifications('#pre-builds')
  // syncBranchesWithMaster(branchesToSync)
  //   onMaster() {
  //     env.ENV = 'stg'
  //   }
  //   onPR() {
  //     env.ENV = 'dev'
  //   }
  //   onDemo {
  //     env.ENV = 'demo'
  //   }

  before('buildinfra:demo') {
    sh "echo 'AMS ID'"
    sh addamsid("demo")
  }


  before('buildinfra:stg') {
    sh "echo 'unlock RG stg'"
    sh unlockRg("stg")
  }
    
}