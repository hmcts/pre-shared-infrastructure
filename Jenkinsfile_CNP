#!groovy
//noinspection GroovyUnusedAssignment
@Library("Infrastructure@use-dev-sub") _

def product = "pre"
def component = "shared-infrastructure"

static String encrypthost(String envName){
  def encryptvmdisk = "environment='" +  envName + "';" +
        'rgName="pre-sbox";' +
        'lockName="${environment}-lock";' +
        '' +
        'az login --identity;' +
        'az account set -s "DTS-SHAREDSERVICES-${environment}";' +
        '' +
        'az feature register --namespace Microsoft.Compute --name EncryptionAtHost'
        
    return encryptvmdisk;
}
static String addamsid(String envName){
  def amsstorageid = "environment='" +  envName + "';" +
        'rgName="pip-ss-${environment}-rg";' +
        'lockName="${environment}-lock";' +
        '' +
        'az login --identity;' +
        'az account set -s "DTS-SHAREDSERVICES-${environment}";' +
        '' +
        'az ams account identity assign -n preams${environment} -g pre-${environment} --user-assigned "/subscriptions/DTS-SHAREDSERVICES-${environment}/resourcegroups/managed-identities-${environment}-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/pre-${environment}-mi";' +
        'az ams account storage set-authentication --storage-auth ManagedIdentity --user-assigned "/subscriptions/DTS-SHAREDSERVICES-${environment}/resourcegroups/managed-identities-${environment}-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/pre-${environment}-mi" --account-name preams${environment} --resource-group pre-${environment}' 
        
    return amsstorageid;
}
static String unlockRg(String envName){
  def unlockScript = "environment='" +  envName + "';" +
        'rgName="pre-${environment}";' +
        'lockName="${environment}-lock";' +
        '' +
        'az login --identity;' +
        'az account set -s "DTS-SHAREDSERVICES-${environment}";' +
        '' +
        'echo "Get ${lockName} lock from ${rgName}";' +
        'lock=$(az lock list --resource-group ${rgName} --query "[? contains(name, \'${lockName}\')].{name:name}" -o tsv);' +
        '' +
        '$($lock != "" && echo "Delete Lock ${lockName} on ${rgName}"; az lock delete --name ${lockName} --resource-group ${rgName} || echo "${lockName} on ${rgName} not found")'

    return unlockScript;
}

def branchesToSync = ['demo']

withInfraPipeline(product) {
  enableSlackNotifications('#pre-builds')
  syncBranchesWithMaster(branchesToSync)

  before('buildinfra:stg') {
    sh "echo 'unlock RG stg'"
    sh unlockRg("stg")
  }
    
}
